def Exporter1_IP
def Exporter2_IP
pipeline {
    agent any
    parameters {
        booleanParam defaultValue: false, name: 'blCreateVPC'
        booleanParam defaultValue: false, name: 'blCreateInstances'
        booleanParam defaultValue: false, name: 'blTFApply'
        booleanParam defaultValue: false, name: 'blTestAnsible'
        booleanParam defaultValue: false, name: 'blUpdateAWS'
        booleanParam defaultValue: false, name: 'blDestroy'
    }
    options {
        ansiColor('xterm')
    }
    environment {
        AWS_CRED        = 'aws_jr10_wanda' //Change to yours
        OwnerEmail      = 'liwhh0807@gmail.com' //Change to yours
        S3BucketName    = 'jr10-monitoring-wanda' //Change to yours, used to save cfn yml files larger than 50KB
        SecurityGroupID = 'sg-0110793fc73c65aa3' //Change to your default VPC's default security group ID
        JenkinsServer   = 'azure.jenkins-wli.com'   //Change to your JenkinsServer URL
        AWS_REGION      = 'ap-southeast-2'
        VPCStackName    = 'VPCALBStack'
        VPCTemplate     = 'vpc-alb-app-db.yaml'
        EC2StackName    = 'LinuxMachineDeploy'
        EC2Template     = 'LinuxMachineDeploy.yaml'
        InstanceType    = 't2.medium'
        InstanceCount   = 3
        SecurityPorts   = '[22,443,3000,8080,9100]' //SSH, HTTPS, grafana, cadvisor, node-exporter


    }
    // Test passed on a Jenkins server installed on VM
    // Docker Jenkins server needs to use agent for terraform etc.,  or install tools by entering Jenkins container
    stages {
        stage('CFN Create VPC_ALB..') {
            when {expression{return params.blCreateVPC}}
            steps {
                withAWS(credentials: AWS_CRED, region: 'ap-southeast-2') {
                    // some block
                    dir('cfn') {
                        sh '''
                            aws s3 mb s3://$S3BucketName --region $AWS_REGION
                            aws s3 cp $VPCTemplate s3://$S3BucketName
                            aws cloudformation create-stack --stack-name $VPCStackName \
                            --template-url https://$S3BucketName.s3.amazonaws.com/$VPCTemplate \
                            --tags Key=owner,Value=$OwnerEmail \
                            --capabilities CAPABILITY_NAMED_IAM
                            aws s3 rm s3://$S3BucketName/$VPCTemplate
                            aws s3 rb s3://$S3BucketName
                        '''
                    }
                }
            }
        }
        stage('CFN Create Instance') {
            when {expression{return params.blCreateInstances}}
            steps {
                withAWS(credentials: AWS_CRED, region: 'ap-southeast-2') {
                    // some block
                    script {
                        timeout(10) {
                            input "Have the VPS ALB ... been created?"
                        }
                    }
                    dir('cfn') {
                        sh '''
                            aws cloudformation create-stack --stack-name $EC2StackName \
                            --template-body file://$EC2Template \
                            --parameters ParameterKey=InstanceType,ParameterValue=$InstanceType \
                                ParameterKey=VPCImportName,ParameterValue=$VPCStackName \
                            --tags Key=owner,Value=$OwnerEmail \
                            --capabilities CAPABILITY_IAM                     
                        '''
                    }
                }
            }
        }
        stage('TF Launch Instances') {
            // Terraform must be installed
            // ssh key pairs must be configured:
            // sudo -i
            // su jenkins
            // ssh-keygen (press ENTER for passphrase)
            when {expression{return params.blTFApply}}
            steps {
                withAWS(credentials: AWS_CRED, region: 'ap-southeast-2') {
                    // some block
                    dir('terraform') {
                        sh '''
                            terraform init
                            terraform apply \
                                -var "sec_gid=${SecurityGroupID}" \
                                -var "ec2_count=${InstanceCount}" \
                                -var "sec_ports=${SecurityPorts}" \
                                --auto-approve
                        '''
                    }
                }
            }
        }
        stage('Test Ansible') {
            // Important: boto3 & botocore must be installed
            // apt install python3-pip
            // pip install boto3 botocore
            when {expression{return params.blTestAnsible}}
            steps {
                sleep 60
                withAWS(credentials: AWS_CRED, region: 'ap-southeast-2') {
                    // some block
                    dir('ansible') {
                        sh '''
                            ansible all  -m ping
                        '''
                    }
                }
            }
        }
        stage('Setup Instances') {
            when {expression{return params.blUpdateAWS}}
            steps {
                withAWS(credentials: AWS_CRED, region: 'ap-southeast-2') {
                    // jq must be installed
                    dir('terraform') {
                        script{
                            Exporter1_IP = sh(returnStdout: true, script: "terraform output -json ec2_public_ips | jq -r '.[1]'").trim()
                            Exporter2_IP = sh(returnStdout: true, script: "terraform output -json ec2_public_ips | jq -r '.[2]'").trim()
                        }
                    }
                    dir('ansible') {
                        sh """
                            sed -i 's/Exporter1_IP/${Exporter1_IP}/g' prometheus.yml
                            sed -i 's/Exporter2_IP/${Exporter2_IP}/g' prometheus.yml
                            sed -i 's/MyJenkinsServer/${JenkinsServer}/g' prometheus.yml
                            ansible-playbook playbook.yml 
                    """
                    }
                }
            }
        }
        stage('Destroy Instances') {
            when {expression{return params.blDestroy}}
            steps {
                withAWS(credentials: AWS_CRED, region: 'ap-southeast-2') {
                    // some block
                    dir('terraform') {
                        sh '''
                            terraform destroy   \
                                -var "sec_gid=${SecurityGroupID}" \
                                -var "ec2_count=${
                                    
                                }" \
                                -var "sec_ports=${SecurityPorts}" \
                                --auto-approve
                        '''
                    }
                }
            }
        }
    }
}
